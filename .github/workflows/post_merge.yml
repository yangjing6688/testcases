name: Post Merge CI
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  update_qtest:
    name: Update qTest Testcases
    # runs-on: ubuntu-latest
    runs-on: Ubuntu-20.04
    # workflow_dispatch is a manual trigger. It would only get used for testing or other extenuating circumstances
    # This job's normal trigger is every push to main.

    env:
      pytest_result_file: pytest_data.json
      robot_result_file: robot_data.json
      tag_marker_report_path:     tag_and_marker_report.txt

    steps:
    - name: Checkout extreme_automation_tests
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main

    # https://github.com/tj-actions/changed-files
    - name: Get changed pytest functional tests
      id: pytest-func
      uses: tj-actions/changed-files@v12.2
      with:
        files: |
          Tests/Pytest/(SystemTest|Functional)/([^/]+/)+TestCases/
        separator: ','

    - name: Get changed robot functional tests
      id: robot-func
      uses: tj-actions/changed-files@v12.2
      with:
        files: |
          Tests/Robot/(SystemTest|Functional)/([^/]+/)+TestCases/
        separator: ','

    - name: Checkout framework
      if: ${{ steps.pytest-func.outputs.any_changed == 'true' || steps.robot-func.outputs.any_changed == 'true' }}
      uses: actions/checkout@v3
      with:
        repository: extremenetworks/extreme_automation_framework
        token: ${{ secrets.REGISTRY_PAT }}
        path: extreme_automation_framework
        ref: main

    - name: Install python requirements
      if: ${{ steps.pytest-func.outputs.any_changed == 'true' || steps.robot-func.outputs.any_changed == 'true' }}
      run: |
        pip install -r requirements.txt

    - name: Run pytest inventory tool
      if: ${{ steps.pytest-func.outputs.any_changed == 'true' }}
      run: |
        # Add framework to PYTHONPATH
        export PYTHONPATH="${PYTHONPATH}:${PWD}/extreme_automation_framework"

        pytest_files=$(echo '${{ steps.pytest-func.outputs.all_changed_files }}' | tr ',\n' ' ')

        # Run pytest
        pytest --get_test_info cicd ${pytest_files} || true

        # Check if inventory tool had problems
        if [[ ! -f "${{ env.pytest_result_file }}" ]]; then
            echo "Error: output file not found. Check above exception."
            exit 1
        fi

    - name: Run robot inventory tool
      if: ${{ steps.robot-func.outputs.any_changed == 'true' }}
      env:
        ROBOT_TOOL_PATH: Tests/Robot/get_test_info.py
      run: |
        # Add framework to PYTHONPATH
        export PYTHONPATH="${PYTHONPATH}:${PWD}/extreme_automation_framework"

        robot_files=$(echo '${{ steps.robot-func.outputs.all_changed_files }}' | tr ',\n' ' ')

        # Run robot
        python $ROBOT_TOOL_PATH ${robot_files}

        # Check if inventory tool had problems
        if [[ ! -f "${{ env.robot_result_file }}" ]]; then
            echo "Error: output file not found. Check above exception."
            exit 1
        fi

    - name: Update pytest qtest information
      if: ${{ steps.pytest-func.outputs.any_changed == 'true' }}
      run: |
        set -o pipefail # Preserves the return code from the python script in pipeline below
        python .github/workflows/testcase_tags_parser.py ${{ env.pytest_result_file }} --mode update_qtest \
          --auth_token ${{ secrets.AUTOIQ_PAT }} | tee -a ${{ env.tag_marker_report_path }}

    - name: Update robot qtest information
      if: ${{ steps.robot-func.outputs.any_changed == 'true' }}
      run: |
        set -o pipefail # Preserves the return code from the python script in pipeline below
        python .github/workflows/testcase_tags_parser.py ${{ env.robot_result_file }} --mode update_qtest \
          --auth_token ${{ secrets.AUTOIQ_PAT }} | tee -a ${{ env.tag_marker_report_path }}

    - name: Update AutoIQ testcase data
      if: ${{ steps.pytest-func.outputs.any_changed == 'true' || steps.robot-func.outputs.any_changed == 'true' }}
      run: |
        echo 'github actor: ${{ github.actor }}'
        ACTOR_EMAIL=$( jq -r '."${{ github.actor }}"' .github/workflows/github_names_to_extr_email.json )
        set -o pipefail # Preserves the return code from the python script in pipeline below

        if [[ "${{ steps.robot-func.outputs.any_changed }}" == "true" ]]; then
          python .github/workflows/testcase_tags_parser.py ${{ env.robot_result_file }} --mode update_testcase_data \
            --auth_token ${{ secrets.AUTOIQ_PAT }} --testcase_author "${ACTOR_EMAIL}" | tee -a ${{ env.tag_marker_report_path }}
        fi

        if [[ "${{ steps.pytest-func.outputs.any_changed }}" == "true" ]]; then
          python .github/workflows/testcase_tags_parser.py ${{ env.pytest_result_file }} --mode update_testcase_data \
            --auth_token ${{ secrets.AUTOIQ_PAT }} --testcase_author "${ACTOR_EMAIL}" | tee -a ${{ env.tag_marker_report_path }}
        fi

    - name: Email results
      if: ${{ failure() }}
      run: |
        RECIPIENTS="psadej@extremenetworks.com"
        SUBJECT="Error updating qTest or Testcase data - ${{ github.repository }}"
        EMAIL_BODY="See error in attached report or on GitHub: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        # Commented out because attachments were causing email to hang
        #
        # ATTACHMENTS=./${{ env.tag_marker_report_path }}
        # echo "Sending email to ${RECIPIENTS} with subject ${SUBJECT} and message ${EMAIL_BODY} and attachments ${ATTACHMENTS}"
        # python .github/workflows/send_email.py --recipients "${RECIPIENTS}" --subject "${SUBJECT}" --message "${EMAIL_BODY}" --attachments ${ATTACHMENTS} --auth-token "${{ secrets.AUTOIQ_PAT }}"

        # Send email
        echo "Sending email to ${RECIPIENTS} with subject ${SUBJECT} and message ${EMAIL_BODY}"
        python .github/workflows/send_email.py --recipients "${RECIPIENTS}" --subject "${SUBJECT}" --message "${EMAIL_BODY}" --auth-token "${{ secrets.AUTOIQ_PAT }}"
